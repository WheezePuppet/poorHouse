int findNextLow(int x)
{
	for(int i=x; i<COMM_NUM; i++)
	{
		if(commoditiesHeld[i]<minThreshold[i])
		{
			return i;
		}
	}
}

int checkStatus(int x)
{
	if(commoditiesHeld[x]<minThreshold[i])
	{
		return 1;
	}
	if(commoditiesHeld[x]>maxThreshold[i])
	{
		return 3;
	}
	if(commoditiesHeld[x]<maxThreshold[i])
	{
		return 2;
	}
}

void swap(double x, Human& other, int alow, int blow)
{
	commoditiesHeld[alow]+=x;
	other.commoditiesHeld[alow]-=x;
	commoditiesHeld[blow]-=x;
	other.commoditiesHeld[blow]+=;
}

void transaction(Human& other)
{
for(int i=0; i<COMM_NUMM; i++)
{
	int alow= findNextLow(i);
	if(other.checkStatus(alow)==1)
	{
		i=alow;
	}
	if(other.checkStatus(alow)==3)
	{
		for(int j=0; j<COMM_NUM; j++)
		{
			int blow=other.findNextLow(j);
			if( checkStatus(blow)==1)
			{
				j=blow;
			}
			if( checkStatus(blow)==3)
			{
				double coms[4];
				coms[0]= needThreshold[alow]- commoditiesHeld[alow];
				coms[1]=other.commoditiesHeld[alow]-other.wantThreshold[alow];
				coms[2]=other.needThreshold[blow]-other.commoditiesHeld[blow];
				coms[3]= commoditiesHeld[blow]- wantThreshold[blow];
				double* x = min_element(coms, coms+4);
				double change=*x;
				swap(change, other, alow, blow);
				j=blow;
			}
		}
		i=alow;
	}
}

for(int i=0; i<COMM_NUM; i++)
{
	int alow= findNextLow(i);
	if(other.checkStatus(alow)==1)
	{
		i=alow;
	}
	if(other.checkStatus(alow)==2)
	{
		for(int j=0; j<COMM_NUM; j++)
		{
			int blow=other.findNextLow(j);
			if(checkStatus(blow)==1)
			{
				j=blow;
			}
			if(checkStatus(blow)==3)
			{
				double coms[4];
				coms[0]= needThreshold[alow]- commoditiesHeld[alow];
				coms[1]=other.commoditiesHeld[alow]-other.needThreshold[alow];
				coms[2]=other.needThreshold[blow]-other.commoditiesHeld[blow];
				coms[3]= commoditiesHeld[blow]- needThreshold[blow];
				double* x = min_element(coms, coms+4);
				double change=*x;
				swap(change, other, alow, blow);
				j=blow;
			}
		}
	i=alow;
	}
}
}
