heatmap()
source("demo.R")
source("demo.R")
levelplot(matrix(runif(100),nrow=10))
require(lattice)
levelplot(matrix(runif(100),nrow=10))
source("doit.R")
source("doit.R")
source("doit.R")
source("doit.R")
file.exists("/tmp")
file.exists("/tmp/blah")
source("doit.R")
source("doit.R")
source("doit.R")
source("doit.R")
source("doit.R")
source("doit.R")
source("doit.R")
?system
blah <- system("java Model 1 1")
blah
?system
blah <- system("java Model 1 1",intern=TRUE)
blah
split(blah,",")
strsplit(blah,",")
strsplit(blah,",")[[1]]
as.numeric(strsplit(blah,",")[[1]])
source("doit.R")
source("doit.R")
source("doit.R")
source("doit.R")
results
source("doit.R")
source("doit.R")
results
nums.trading.partners
seq(nums.trading.partners)
num.trading.partners
rm(num.trading.partners)
source("doit.R")
res
Q
source("doit.R")
results
reshape
?reshape
results
blah <- matrix(nrow=11,ncol=11)
blah
blah[results[,1],results[,2]]=results[,3]
blah
source("doit.R")
source("doit.R")
source("doit.R")
run.sims()
pngify.heatmap(results)
length(unique(results[,1]))
length(unique(results[,2]))
source("doit.R")
pngify.heatmap(results)
n
n
s
Q
heatmap()
history(1000)
source("doit.R")
pngify.heatmap(results)
c
display.heatmap(results)
source("doit.R")
display.heatmap(results)
source("doit.R")
display.heatmap(results)
mat
Q
source("doit.R")
display.heatmap(results)
mat
n
n
dev.off()
source("doit.R")
display.heatmap(results)
c
source("doit.R")
dev.off()
dev.off()
source("doit.R")
display.heatmap(results)
c
results
results[results[,2]==3,]
results[results[,1]==3,]
mat
mat <- matrix(nrow=11,ncol=11)
results[,1]
results[,1]+1
results[,2]+1
results[3,]
results[,3]
unique(results[,3])
length(unique(results[,3]))
length(results[,3])
source("doit.R")
dev.off()
display.heatmap(results)
mat
class(results[,1])
class(results[,2])
class(results[,3])
results[,1]+1
results[,2]+1
mat
mat[results[,1]+1,results[,2]+1]
Q
results
for (row in results) {
cat("hi\n")
}
source("doit.R")
display.heatmap(results)
mat
Q
source("doit.R")
display.heatmap(results)
mat
unique(mat)
unique(as.vector(mat))
length(unique(as.vector(mat)))
c
display.heatmap(results)
Q
source("doit.R")
display.heatmap(results)
head(results)
results[order(results$total.cons),]
head(results[order(results$total.cons),])
head(results[order(results$total.cons),],20)
display.heatmap(results)
rm(list=ls())
source("doit.R")
run.sims(seq(0,100,1),seq(0,100,1))
write.csv(results,file="/tmp/results.csv")
ls()
results <- run.sims(seq(0,100,1),seq(0,100,1))
results
write.csv(results,"~/research/poorhouse/poorHouse/marketModel/results.csv")
?write.csv
write.csv(results,"~/research/poorhouse/poorHouse/marketModel/results.csv",row.names=FALSE)
display.heatmap(results)
?levelplot
source("marketModel.R")
install.packages("doParallel",lib="/home/rruud")
.libPaths(c(.libPaths(),"/home/rruud"))
source("marketModel.R")
ls()
results <- param.sweep(seq(0,100,5),seq(0,100,5))
system("java Model 1 2")
system("java Model 1 2")
results
head(results)
system("java Model 1 2")
results <- param.sweep(seq(0,100,5),seq(0,100,5))
.libPaths()
.libPaths(c(.libPaths(),"/home/rruud"))
.libPaths()
source("marketModel.R")
results <- param.sweep(seq(0,100,5),seq(0,100,5))
results
pngify.heatmap(results)
pngify.heatmap(results,"~/heatPlot.png")
pngify.heatmap(results,"heatPlot.png")
levelplot(results)
heatplot(results)
ls()
png("something.png")
display.heatmap(results)
dev.off()
russell<-track.commodities(1,2)
russell
head(russell)
png("showPrices.png")
display.commodity.prices(russell)
dev.off()
source("marketModel.R")
library(doParallel)
install.packages(doParallel)
install.packages("doParallel")
quit()
ls()
quit()
